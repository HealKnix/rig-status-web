# Generated by Django 5.0.6 on 2024-06-24 19:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DrillingStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'drilling_status',
            },
        ),
        migrations.CreateModel(
            name='RobotStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'robot_status',
            },
        ),
        migrations.CreateModel(
            name='SensorStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'sensor_status',
            },
        ),
        migrations.CreateModel(
            name='TechStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Tech Status',
                'db_table': 'tech_status',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_names', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Rig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('well_depth', models.IntegerField(help_text='Глубина скважины (сколько надо пробурить (в метрах))')),
                ('bottom_hole_drilling', models.IntegerField(help_text='Глубина бурения (сколько пробурили (в метрах))')),
                ('connection_speed', models.IntegerField(help_text='Скорость соединения (в Кб/с)')),
                ('tech_date', models.DateField()),
                ('drilling_status_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.drillingstatus')),
                ('tech_status_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.techstatus')),
            ],
            options={
                'verbose_name_plural': 'Rigs',
                'db_table': 'rig',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='HoistingSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
            ],
            options={
                'db_table': 'hoisting_system',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(max_length=255)),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.sensorstatus')),
            ],
            options={
                'db_table': 'sensor',
            },
        ),
        migrations.CreateModel(
            name='HydraulicPowerTong',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screwing_torque', models.DecimalField(decimal_places=2, max_digits=8)),
                ('unscrewing_torque', models.DecimalField(decimal_places=2, max_digits=8)),
                ('spinner_torque', models.DecimalField(decimal_places=2, max_digits=8)),
                ('active', models.BooleanField(default=False)),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
            ],
            options={
                'db_table': 'hydraulic_power_tong',
                'indexes': [models.Index(fields=['rig_id'], name='hydraulic_p_rig_id__33ca93_idx')],
            },
        ),
        migrations.CreateModel(
            name='DrillingMotor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('axial_load', models.DecimalField(decimal_places=2, max_digits=8)),
                ('shaft_rotation_speed', models.DecimalField(decimal_places=2, max_digits=8)),
                ('momentum_force', models.DecimalField(decimal_places=2, max_digits=8)),
                ('active', models.BooleanField(default=False)),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
            ],
            options={
                'db_table': 'drilling_motor',
                'indexes': [models.Index(fields=['rig_id'], name='drilling_mo_rig_id__67cf00_idx')],
            },
        ),
        migrations.CreateModel(
            name='DrillingFluidSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('density', models.DecimalField(decimal_places=2, max_digits=8)),
                ('viscosity', models.DecimalField(decimal_places=2, max_digits=8)),
                ('filtration', models.DecimalField(decimal_places=2, max_digits=8)),
                ('stability', models.BigIntegerField()),
                ('suspended_particle_concentration', models.DecimalField(decimal_places=2, max_digits=8)),
                ('active', models.BooleanField(default=False)),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
            ],
            options={
                'db_table': 'drilling_fluid_system',
                'indexes': [models.Index(fields=['rig_id'], name='drilling_fl_rig_id__a65869_idx')],
            },
        ),
        migrations.CreateModel(
            name='Defectoscope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.DecimalField(decimal_places=2, max_digits=8)),
                ('working_time', models.DecimalField(decimal_places=2, max_digits=8)),
                ('ative', models.BooleanField(default=False)),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
            ],
            options={
                'db_table': 'defectoscope',
                'indexes': [models.Index(fields=['rig_id'], name='defectoscop_rig_id__294d10_idx')],
            },
        ),
        migrations.CreateModel(
            name='Robot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('pipe_count', models.IntegerField()),
                ('rig_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.rig')),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.robotstatus')),
            ],
            options={
                'db_table': 'robot',
                'indexes': [models.Index(fields=['rig_id'], name='robot_rig_id__89b927_idx')],
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=8)),
                ('sensor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rig_status.sensor')),
            ],
            options={
                'db_table': 'sensor_data',
                'indexes': [models.Index(fields=['sensor_id'], name='sensor_data_sensor__90dcbe_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='sensor',
            index=models.Index(fields=['rig_id'], name='sensor_rig_id__ba5fee_idx'),
        ),
        migrations.AddIndex(
            model_name='rig',
            index=models.Index(fields=['drilling_status_id'], name='rig_drillin_c49cee_idx'),
        ),
        migrations.AddIndex(
            model_name='rig',
            index=models.Index(fields=['tech_status_id'], name='rig_tech_st_81869d_idx'),
        ),
    ]
